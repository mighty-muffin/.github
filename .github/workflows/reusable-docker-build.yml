---
name: Reusable - Docker Build and Push

# REUSABLE WORKFLOW with INPUTS
# to keep this workflow simple, assumptions are made:
# - only able to push to Docker Hub and/or GHCR (GHCR by default)
# - adds a comment to PRs of tags and label metadata
# - you want to use GitHub cache for buildx image layers
# - Builds on PR with tag of `pr-NUMBER` (same tag each PR push)
# - Builds on push to default_branch will have a unique tag of `stable-YYYYMMDD-SHA`
# - Builds on push to default_branch will have a reusable tag of `latest` (useful for easy human testing, not servers)
# - Builds on a tag push with semver will also have a reusable tag of `latest` and also a semver tag
# - Defaults to only linux/amd64 platform builds, but can build for others in parallel

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      attest-enable:
        description: Create an attestion build provenance with image tags and labels
        required: false
        default: false
        type: boolean
      build-args:
        description: Build arguments to pass to the Docker build
        required: false
        type: string
      comment-enable:
        description: Create a PR comment with image tags and labels
        required: false
        default: true
        type: boolean
      context:
        description: Docker context (path) to start build from
        required: false
        type: string
      file:
        description: Dockerfile to build, relative to context path
        required: false
        type: string
      flavor-rules:
        description: Three rules to (optionally) set for tag-rules, latest, prefix, and suffix
        required: false
        type: string
        default: |
            latest=auto
      ghcr-enable:
        description: Log into GHCR
        required: false
        default: true
        type: boolean
      image-names:
        description: A list of the account/repo names for docker build to push to
        required: false
        type: string
        default: |
          ghcr.io/${{ github.repository }}
      platforms:
        description: Platforms to build for
        required: false
        type: string
        default: linux/amd64
      push:
        description: Push image to registry(s)
        required: false
        type: boolean
        default: true
      tag-rules:
        description: Use docker-metadata action to create tags from a key-value pair list in CSV format
        required: false
        type: string
        default: |
          type=raw,value=latest,enable={{is_default_branch}},priority=100
          type=ref,event=branch,priority=100
          type=raw,value=gha-${{ github.run_id }},enable=${{github.event_name == 'pull_request'}},priority=200
          type=raw,value=nightly-${{ github.run_id }},enable=${{github.event.schedule  == 'schedule'}},priority=200
          type=ref,event=pr,priority=200
          type=ref,event=tag,priority=200
          type=sha,value={{sha}},enable={{is_default_branch}},priority=300
      target:
        description: Build stage to target
        required: false
        type: string

    outputs:
      image-tag:
        description: "single-use image tag for GHA runs"
        value: ${{ jobs.docker-build-push.outputs.image-tag }}

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:

  docker-build-push:

    name: Docker - Build
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    outputs:
      image-tag: ${{ steps.image-tag.outputs.image-tag }}

    steps:

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Cache Docker layers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            /tmp/.buildx-cache-app
            /tmp/buildkit-cache
          key: ${{ runner.os }}-buildx-app-${{ github.sha }} | ${{ hashFiles('**/Dockerfile', '**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Login to GHCR
        if: inputs.ghcr-enable
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ inputs.image-names }}
          flavor: ${{ inputs.flavor-rules }}
          tags: ${{ inputs.tag-rules }}

      - name: Docker Build and Push
        id: build_image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          platforms: ${{ inputs.platforms }}
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          target: ${{ inputs.target }}
          builder: ${{ steps.buildx.outputs.name }}
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ inputs.push }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          provenance: true
          sbom: true

      - name: Attest
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        if: github.event_name == 'pull_request' && inputs.attest-enable
        id: attest
        with:
          subject-name: ${{ inputs.image-names }}
          subject-digest: ${{ steps.build_image.outputs.digest }}
          push-to-registry: true

      - name: Find comment for image tags
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        if: github.event_name == 'pull_request' && inputs.comment-enable
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed

      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        if: github.event_name == 'pull_request' && inputs.comment-enable
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace

      - name: Find the primary image tag we just pushed, and output it
        id: image-tag
        run: |
          # shellcheck disable=SC2086
          echo "image-tag=${{ steps.docker_meta.outputs.version }}" >> $GITHUB_OUTPUT
